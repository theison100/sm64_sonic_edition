diff a/src/game/mario_actions_cutscene.c b/src/game/mario_actions_cutscene.c	(rejected hunks)
@@ -3,6 +3,7 @@
 #include "prevent_bss_reordering.h"
 #include "sm64.h"
 #include "area.h"
+#include "audio/data.h"
 #include "audio/external.h"
 #include "behavior_data.h"
 #include "camera.h"
@@ -28,6 +29,7 @@
 #include "sound_init.h"
 #include "rumble_init.h"
 
+
 // TODO: put this elsewhere
 enum SaveOption { SAVE_OPT_SAVE_AND_CONTINUE = 1, SAVE_OPT_SAVE_AND_QUIT, SAVE_OPT_CONTINUE_DONT_SAVE };
 
@@ -48,7 +50,7 @@ static s8 D_8032CBE4 = 0;
 static s8 D_8032CBE8 = 0;
 static s8 D_8032CBEC[7] = { 2, 3, 2, 1, 2, 3, 2 };
 
-static u8 sStarsNeededForDialog[] = { 1, 3, 8, 30, 50, 70 };
+static u8 sStarsNeededForDialog[6] = { 1, 3, 8, 30, 50, 70 };
 
 /**
  * Data for the jumbo star cutscene. It specifies the flight path after triple
@@ -234,7 +236,7 @@ s32 get_star_collection_dialog(struct MarioState *m) {
     s32 dialogID = 0;
     s32 numStarsRequired;
 
-    for (i = 0; i < ARRAY_COUNT(sStarsNeededForDialog); i++) {
+    for (i = 0; i < 6; i++) {
         numStarsRequired = sStarsNeededForDialog[i];
         if (m->prevNumStarsForDialog < numStarsRequired && m->numStars >= numStarsRequired) {
             dialogID = i + DIALOG_141;
@@ -252,7 +254,8 @@ void handle_save_menu(struct MarioState *m) {
     // wait for the menu to show up
     if (is_anim_past_end(m) && gSaveOptSelectIndex != 0) {
         // save and continue / save and quit
-        if (gSaveOptSelectIndex == SAVE_OPT_SAVE_AND_CONTINUE || gSaveOptSelectIndex == SAVE_OPT_SAVE_AND_QUIT) {
+        if (gSaveOptSelectIndex == SAVE_OPT_SAVE_AND_CONTINUE
+            || gSaveOptSelectIndex == SAVE_OPT_SAVE_AND_QUIT) {
             save_file_do_save(gCurrSaveFileNum - 1);
 
             if (gSaveOptSelectIndex == SAVE_OPT_SAVE_AND_QUIT) {
@@ -277,6 +280,7 @@ void handle_save_menu(struct MarioState *m) {
     }
 }
 
+
 /**
  * spawn_obj_at_mario_rel_yaw: Spawns object at Mario with relative yaw.
  * Spawns object with given behavior and model and copies over Mario's position
@@ -299,9 +303,7 @@ struct Object *spawn_obj_at_mario_rel_yaw(struct MarioState *m, s32 model, const
  * SOUND_ACTION_UNKNOWN43D.
  */
 void cutscene_take_cap_off(struct MarioState *m) {
-    m->flags &= ~MARIO_CAP_ON_HEAD;
-    m->flags |= MARIO_CAP_IN_HAND;
-    play_sound(SOUND_ACTION_UNKNOWN43D, m->marioObj->header.gfx.cameraToObject);
+   
 }
 
 /**
@@ -310,9 +312,10 @@ void cutscene_take_cap_off(struct MarioState *m) {
  * SOUND_ACTION_UNKNOWN43E.
  */
 void cutscene_put_cap_on(struct MarioState *m) {
-    m->flags &= ~MARIO_CAP_IN_HAND;
+  /*  m->flags &= ~MARIO_CAP_IN_HAND;
     m->flags |= MARIO_CAP_ON_HEAD;
     play_sound(SOUND_ACTION_UNKNOWN43E, m->marioObj->header.gfx.cameraToObject);
+    */
 }
 
 /**
@@ -421,8 +424,8 @@ s32 act_reading_npc_dialog(struct MarioState *m) {
 
 // puts Mario in a state where he's waiting for (npc) dialog; doesn't do much
 s32 act_waiting_for_dialog(struct MarioState *m) {
-    set_mario_animation(m, m->heldObj == NULL ? MARIO_ANIM_FIRST_PERSON
-                                              : MARIO_ANIM_IDLE_WITH_LIGHT_OBJ);
+    set_mario_animation(m,
+                        m->heldObj == NULL ? MARIO_ANIM_FIRST_PERSON : MARIO_ANIM_IDLE_WITH_LIGHT_OBJ);
     vec3f_copy(m->marioObj->header.gfx.pos, m->pos);
     vec3s_set(m->marioObj->header.gfx.angle, 0, m->faceAngle[1], 0);
     return FALSE;
@@ -535,6 +538,7 @@ s32 act_reading_sign(struct MarioState *m) {
     return FALSE;
 }
 
+// debug free move action
 s32 act_debug_free_move(struct MarioState *m) {
     struct Surface *surf;
     f32 floorHeight;
@@ -589,6 +593,7 @@ s32 act_debug_free_move(struct MarioState *m) {
     return FALSE;
 }
 
+// star dance handler
 void general_star_dance_handler(struct MarioState *m, s32 isInWater) {
     s32 dialogID;
     if (m->actionState == 0) {
@@ -616,7 +621,14 @@ void general_star_dance_handler(struct MarioState *m, s32 isInWater) {
                     level_trigger_warp(m, WARP_OP_STAR_EXIT);
                 } else {
                     enable_time_stop();
-                    create_dialog_box_with_response(gLastCompletedStarNum == 7 ? DIALOG_013 : DIALOG_014);
+					if (m->coinstartotal != 7)
+					{
+						create_dialog_box_with_response(gLastCompletedStarNum == 7 ? DIALOG_013 : DIALOG_014);
+					}
+					else
+					{
+						create_dialog_box_with_response(gLastCompletedStarNum == 7 ? DIALOG_099 : DIALOG_014);
+					}
                     m->actionState = 1;
                 }
                 break;
@@ -641,11 +653,17 @@ void general_star_dance_handler(struct MarioState *m, s32 isInWater) {
 
 s32 act_star_dance(struct MarioState *m) {
     m->faceAngle[1] = m->area->camera->yaw;
+    
     set_mario_animation(m, m->actionState == 2 ? MARIO_ANIM_RETURN_FROM_STAR_DANCE
                                                : MARIO_ANIM_STAR_DANCE);
     general_star_dance_handler(m, 0);
     if (m->actionState != 2 && m->actionTimer >= 40) {
         m->marioBodyState->handState = MARIO_HAND_PEACE_SIGN;
+        m->flags &= ~MARIO_CAP_ON_HEAD;
+    }
+    else
+    {
+        m->flags |= MARIO_CAP_ON_HEAD;
     }
     stop_and_set_height_to_floor(m);
     return FALSE;
@@ -653,14 +671,20 @@ s32 act_star_dance(struct MarioState *m) {
 
 s32 act_star_dance_water(struct MarioState *m) {
     m->faceAngle[1] = m->area->camera->yaw;
+    
     set_mario_animation(m, m->actionState == 2 ? MARIO_ANIM_RETURN_FROM_WATER_STAR_DANCE
                                                : MARIO_ANIM_WATER_STAR_DANCE);
     vec3f_copy(m->marioObj->header.gfx.pos, m->pos);
     vec3s_set(m->marioObj->header.gfx.angle, 0, m->faceAngle[1], 0);
     general_star_dance_handler(m, 1);
     if (m->actionState != 2 && m->actionTimer >= 62) {
+        m->flags &= ~MARIO_CAP_ON_HEAD;
         m->marioBodyState->handState = MARIO_HAND_PEACE_SIGN;
     }
+    else
+    {
+        m->flags |= MARIO_CAP_ON_HEAD;
+    }
     return FALSE;
 }
 
@@ -679,6 +703,7 @@ s32 act_fall_after_star_grab(struct MarioState *m) {
     return FALSE;
 }
 
+// general death hander
 s32 common_death_handler(struct MarioState *m, s32 animation, s32 frameToDeathWarp) {
     s32 animFrame = set_mario_animation(m, animation);
     if (animFrame == frameToDeathWarp) {
@@ -857,6 +882,7 @@ s32 act_unlocking_star_door(struct MarioState *m) {
     return FALSE;
 }
 
+// not sure what kind of door this is
 s32 act_entering_star_door(struct MarioState *m) {
     f32 targetDX;
     f32 targetDZ;
@@ -939,11 +965,13 @@ s32 act_going_through_door(struct MarioState *m) {
         if (m->actionTimer == 16) {
             level_trigger_warp(m, WARP_OP_WARP_DOOR);
         }
-    } else if (is_anim_at_end(m)) {
-        if (m->actionArg & 2) {
-            m->faceAngle[1] += 0x8000;
+    } else {
+        if (is_anim_at_end(m)) {
+            if (m->actionArg & 2) {
+                m->faceAngle[1] += 0x8000;
+            }
+            set_mario_action(m, ACT_IDLE, 0);
         }
-        set_mario_action(m, ACT_IDLE, 0);
     }
 
     m->actionTimer++;
@@ -1103,8 +1131,16 @@ s32 act_exit_land_save_dialog(struct MarioState *m) {
         // key exit
         case 1:
             animFrame = set_mario_animation(m, MARIO_ANIM_THROW_CATCH_KEY);
+            if ( animFrame <= 105) {
+                m->flags &= ~MARIO_CAP_ON_HEAD;
+            }
+            else
+            {
+                m->flags |= MARIO_CAP_ON_HEAD;
+            }
             switch (animFrame) {
                 case -1:
+                  
                     spawn_obj_at_mario_rel_yaw(m, MODEL_BOWSER_KEY_CUTSCENE, bhvBowserKeyCourseExit, -32768);
                     //! fall through
                 case 67:
@@ -1116,6 +1152,7 @@ s32 act_exit_land_save_dialog(struct MarioState *m) {
                 case 111:
                     play_sound(SOUND_ACTION_UNKNOWN45C, m->marioObj->header.gfx.cameraToObject);
                     // no break
+                   
             }
             handle_save_menu(m);
             break;
@@ -1133,21 +1170,52 @@ s32 act_exit_land_save_dialog(struct MarioState *m) {
             break;
         // exit with cap
         case 3:
+            m->flags &= ~MARIO_CAP_ON_HEAD;
+           
             animFrame = set_mario_animation(m, MARIO_ANIM_TAKE_CAP_OFF_THEN_ON);
+            if (animFrame >= 3 && animFrame < 42) {
+                m->marioBodyState->handState = MARIO_HAND_OPEN;
+            }
             switch (animFrame) {
+            case 3:
+               
+              
+                break;
+
                 case 12:
                     cutscene_take_cap_off(m);
+                    play_sound(SOUND_MARIO_SNORING3, m->marioObj->header.gfx.cameraToObject);
+                    break;
+				
+				case 14:
+                    
+					break;
+                case 24:
+                   
                     break;
-                case 37:
-                // fall through
-                case 53:
-                    play_sound(SOUND_ACTION_BRUSH_HAIR, m->marioObj->header.gfx.cameraToObject);
+
+                case 42:
+                   
                     break;
-                case 82:
-                    cutscene_put_cap_on(m);
+
+                case 64:
+                   
+                    break;
+
+               
+
+				case 70:
+                    
+				
+					break;
+                case 99:
+                    stop_sound(SOUND_MARIO_SNORING3, m->marioObj->header.gfx.cameraToObject);
+                    //cutscene_put_cap_on(m);
+                    m->flags |= MARIO_CAP_ON_HEAD;
                     break;
             }
             handle_save_menu(m);
+            
             break;
     }
 
@@ -1163,9 +1231,7 @@ s32 act_death_exit(struct MarioState *m) {
 #else
         play_sound(SOUND_MARIO_OOOF2, m->marioObj->header.gfx.cameraToObject);
 #endif
-#ifdef VERSION_SH
-        queue_rumble_data(5, 80);
-#endif
+        
         m->numLives--;
         // restore 7.75 units of health
         m->healCounter = 31;
@@ -1198,9 +1264,7 @@ s32 act_falling_death_exit(struct MarioState *m) {
 #else
         play_sound(SOUND_MARIO_OOOF2, m->marioObj->header.gfx.cameraToObject);
 #endif
-#ifdef VERSION_SH
-        queue_rumble_data(5, 80);
-#endif
+        
         m->numLives--;
         // restore 7.75 units of health
         m->healCounter = 31;
@@ -1245,9 +1309,7 @@ s32 act_special_death_exit(struct MarioState *m) {
     }
 
     if (launch_mario_until_land(m, ACT_HARD_BACKWARD_GROUND_KB, MARIO_ANIM_BACKWARD_AIR_KB, -24.0f)) {
-#ifdef VERSION_SH
-        queue_rumble_data(5, 80);
-#endif
+        
         m->numLives--;
         m->healCounter = 31;
     }
@@ -1331,9 +1393,7 @@ s32 act_bbh_enter_spin(struct MarioState *m) {
             m->flags &= ~MARIO_UNKNOWN_08;
             if (perform_air_step(m, 0) == AIR_STEP_LANDED) {
                 level_trigger_warp(m, WARP_OP_UNKNOWN_02);
-#ifdef VERSION_SH
-                queue_rumble_data(15, 80);
-#endif
+            
                 m->actionState = 4;
             }
             if (m->actionState == 2) {
@@ -1401,7 +1461,7 @@ s32 act_teleport_fade_out(struct MarioState *m) {
 
 #ifdef VERSION_SH
     if (m->actionTimer == 0) {
-        queue_rumble_data(30, 70);
+        //(30, 70);
         func_sh_8024C89C(2);
     }
 #endif
@@ -1427,7 +1487,7 @@ s32 act_teleport_fade_in(struct MarioState *m) {
 
 #ifdef VERSION_SH
     if (m->actionTimer == 0) {
-        queue_rumble_data(30, 70);
+        //(30, 70);
         func_sh_8024C89C(2);
     }
 #endif
@@ -1511,16 +1571,40 @@ s32 act_squished(struct MarioState *m) {
             } else {
                 if (!(m->flags & MARIO_METAL_CAP) && m->invincTimer == 0) {
                     // cap on: 3 units; cap off: 4.5 units
-                    m->hurtCounter += m->flags & MARIO_CAP_ON_HEAD ? 12 : 18;
-                    play_sound_if_no_flag(m, SOUND_MARIO_ATTACKED, MARIO_MARIO_SOUND_PLAYED);
+					if (!(m->flags & MARIO_IS_SUPER))
+					{
+                        if (gDialogHealthSystem != SONIC_HEALTH) {
+                            m->hurtCounter += m->flags & MARIO_CAP_ON_HEAD ? 12 : 18;
+                        } else {
+                            if (gMarioState->numCoins > 0)
+                            {
+                                if (gMarioState->numCoins >= 50) {
+                                    play_sound(SOUND_GENERAL_RINGLOSS, gGlobalSoundSource);
+                                    obj_spawn_yellow_coins(m->marioObj, 50);
+                                    gMarioState->numCoins = 0;
+                                    gHudDisplay.coins = 0;
+                                }
+                                else {
+                                    play_sound(SOUND_GENERAL_RINGLOSS, gGlobalSoundSource);
+                                    obj_spawn_yellow_coins(m->marioObj, gMarioState->numCoins);
+                                    gMarioState->numCoins = 0;
+                                    gHudDisplay.coins = 0;
+                                }
+
+                            }
+                            else
+                            {
+                                m->health = 0xFF;
+                            }
+                        }
+						play_sound_if_no_flag(m, SOUND_MARIO_ATTACKED, MARIO_MARIO_SOUND_PLAYED);
+					}
                 }
 
                 // Both of the 1.8's are really floats, but one of them has to
-                // be written as a double for this to match on -O2.
+                // be written as a double for this to match on EU.
                 vec3f_set(m->marioObj->header.gfx.scale, 1.8, 0.05f, 1.8f);
-#ifdef VERSION_SH
-                queue_rumble_data(10, 80);
-#endif
+               
                 m->actionState = 1;
             }
             break;
@@ -1592,9 +1676,6 @@ s32 act_putting_on_cap(struct MarioState *m) {
         enable_time_stop();
     }
 
-    if (animFrame == 28) {
-        cutscene_put_cap_on(m);
-    }
 
     if (is_anim_at_end(m)) {
         set_mario_action(m, ACT_IDLE, 0);
@@ -1622,9 +1703,7 @@ void stuck_in_ground_handler(struct MarioState *m, s32 animation, s32 unstuckFra
     if (animFrame == -1) {
         play_sound_and_spawn_particles(m, SOUND_ACTION_TERRAIN_STUCK_IN_GROUND, 1);
     } else if (animFrame == unstuckFrame) {
-#ifdef VERSION_SH
-        queue_rumble_data(5, 80);
-#endif
+        
         play_sound_and_spawn_particles(m, SOUND_ACTION_UNSTUCK_FROM_GROUND, 1);
     } else if (animFrame == target2 || animFrame == target3) {
         play_mario_landing_sound(m, SOUND_ACTION_TERRAIN_LANDING);
@@ -1840,7 +1919,7 @@ static void jumbo_star_cutscene_falling(struct MarioState *m) {
 static s32 jumbo_star_cutscene_taking_off(struct MarioState *m) {
     struct Object *marioObj = m->marioObj;
     s32 animFrame;
-
+    m->flags |= (MARIO_WING_CAP | MARIO_CAP_ON_HEAD);
     if (m->actionState == 0) {
         set_mario_animation(m, MARIO_ANIM_FINAL_BOWSER_RAISE_HAND_SPIN);
         marioObj->rawData.asF32[0x22] = 0.0f;
@@ -1898,7 +1977,7 @@ static s32 jumbo_star_cutscene_flying(struct MarioState *m) {
     f32 targetDZ;
     f32 targetHyp;
     s16 targetAngle;
-
+    m->flags |= (MARIO_WING_CAP | MARIO_CAP_ON_HEAD);
     switch (m->actionState) {
         case 0:
             set_mario_animation(m, MARIO_ANIM_WING_CAP_FLY);
@@ -1943,6 +2022,7 @@ static s32 jumbo_star_cutscene_flying(struct MarioState *m) {
 enum { JUMBO_STAR_CUTSCENE_FALLING, JUMBO_STAR_CUTSCENE_TAKING_OFF, JUMBO_STAR_CUTSCENE_FLYING };
 
 static s32 act_jumbo_star_cutscene(struct MarioState *m) {
+    m->flags &= ~MARIO_CAP_ON_HEAD;
     switch (m->actionArg) {
         case JUMBO_STAR_CUTSCENE_FALLING:
             jumbo_star_cutscene_falling(m);
@@ -2176,6 +2256,7 @@ static void end_peach_cutscene_run_to_peach(struct MarioState *m) {
 static void end_peach_cutscene_dialog_1(struct MarioState *m) {
     s32 animFrame = set_mario_animation(m, m->actionState == 0 ? MARIO_ANIM_CREDITS_TAKE_OFF_CAP
                                                                : MARIO_ANIM_CREDITS_LOOK_UP);
+    m->flags &= ~MARIO_CAP_ON_HEAD;
 
     if (m->actionState == 0) {
         if (animFrame == 8) {
@@ -2339,7 +2420,7 @@ static u8 sMarioBlinkOverride[20] = {
 
 static void end_peach_cutscene_kiss_from_peach(struct MarioState *m) {
     sEndPeachAnimation = 10;
-
+    m->flags &= ~MARIO_CAP_ON_HEAD;
     if (m->actionTimer >= 90) {
         m->marioBodyState->eyeState =
             m->actionTimer < 110 ? sMarioBlinkOverride[m->actionTimer - 90] : MARIO_EYES_HALF_CLOSED;
@@ -2382,18 +2463,19 @@ static void end_peach_cutscene_kiss_from_peach(struct MarioState *m) {
 
 static void end_peach_cutscene_star_dance(struct MarioState *m) {
     s32 animFrame = set_mario_animation(m, MARIO_ANIM_CREDITS_PEACE_SIGN);
-
+    m->flags &= ~MARIO_CAP_ON_HEAD;
     if (animFrame == 77) {
         cutscene_put_cap_on(m);
     }
     if (animFrame == 88) {
         play_sound(SOUND_MARIO_HERE_WE_GO, m->marioObj->header.gfx.cameraToObject);
     }
-    if (animFrame >= 98) {
+
+    if (animFrame >= 77) {
         m->marioBodyState->handState = MARIO_HAND_PEACE_SIGN;
     }
 
-    if (m->actionTimer < 52) {
+    if (m->actionTimer < 44) {
         m->marioBodyState->eyeState = MARIO_EYES_HALF_CLOSED;
     }
 
@@ -2433,7 +2515,7 @@ static void end_peach_cutscene_star_dance(struct MarioState *m) {
 // "...for Mario..."
 static void end_peach_cutscene_dialog_3(struct MarioState *m) {
     set_mario_animation(m, MARIO_ANIM_FIRST_PERSON);
-
+    m->flags &= ~MARIO_CAP_ON_HEAD;
     sEndPeachObj->oPosY = end_obj_set_visual_pos(sEndPeachObj);
     sEndRightToadObj->oPosY = end_obj_set_visual_pos(sEndRightToadObj);
     sEndLeftToadObj->oPosY = end_obj_set_visual_pos(sEndLeftToadObj);
@@ -2630,7 +2712,7 @@ static s32 act_credits_cutscene(struct MarioState *m) {
     }
 
     if (m->actionTimer++ == TIMER_CREDITS_WARP) {
-        level_trigger_warp(m, WARP_OP_CREDITS_NEXT);
+        level_trigger_warp(m, 24);
     }
 
     m->marioObj->header.gfx.angle[1] += (gCurrCreditsEntry->unk02 & 0xC0) << 8;
@@ -2640,6 +2722,7 @@ static s32 act_credits_cutscene(struct MarioState *m) {
 
 static s32 act_end_waving_cutscene(struct MarioState *m) {
     if (m->actionState == 0) {
+        m->flags &= ~MARIO_CAP_ON_HEAD;
         m->statusForCamera->cameraEvent = CAM_EVENT_START_END_WAVING;
 
         sEndPeachObj = spawn_object_abs_with_rot(gCurrentObject, 0, MODEL_PEACH, bhvEndPeach, 60, 906,
@@ -2748,8 +2831,10 @@ s32 mario_execute_cutscene_action(struct MarioState *m) {
     }
     /* clang-format on */
 
-    if (!cancel && (m->input & INPUT_IN_WATER)) {
-        m->particleFlags |= PARTICLE_IDLE_WATER_WAVE;
+    if (!cancel) {
+        if (m->input & INPUT_IN_WATER) {
+            m->particleFlags |= PARTICLE_IDLE_WATER_WAVE;
+        }
     }
 
     return cancel;
