diff a/src/game/mario_misc.c b/src/game/mario_misc.c	(rejected hunks)
@@ -88,7 +88,7 @@ Gfx *geo_draw_mario_head_goddard(s32 callContext, struct GraphNode *node, Mat4 *
     UNUSED Mat4 *transform = c;
 
     if (callContext == GEO_CONTEXT_RENDER) {
-        if (gPlayer1Controller->controllerData != NULL && !gWarpTransition.isActive) {
+        if (gPlayer1Controller->controllerData != NULL && gWarpTransition.isActive == 0) {
             gd_copy_p1_contpad(gPlayer1Controller->controllerData);
         }
         gfx = (Gfx *) PHYSICAL_TO_VIRTUAL(gdm_gettestdl(asGenerated->parameter));
@@ -101,9 +101,9 @@ Gfx *geo_draw_mario_head_goddard(s32 callContext, struct GraphNode *node, Mat4 *
 
 static void toad_message_faded(void) {
     if (gCurrentObject->oDistanceToMario > 700.0f) {
-        gCurrentObject->oToadMessageRecentlyTalked = FALSE;
+        gCurrentObject->oToadMessageRecentlyTalked = 0;
     }
-    if (!gCurrentObject->oToadMessageRecentlyTalked && gCurrentObject->oDistanceToMario < 600.0f) {
+    if (gCurrentObject->oToadMessageRecentlyTalked == 0 && gCurrentObject->oDistanceToMario < 600.0f) {
         gCurrentObject->oToadMessageState = TOAD_MESSAGE_OPACIFYING;
     }
 }
@@ -111,12 +111,14 @@ static void toad_message_faded(void) {
 static void toad_message_opaque(void) {
     if (gCurrentObject->oDistanceToMario > 700.0f) {
         gCurrentObject->oToadMessageState = TOAD_MESSAGE_FADING;
-    } else if (!gCurrentObject->oToadMessageRecentlyTalked) {
-        gCurrentObject->oInteractionSubtype = INT_SUBTYPE_NPC;
-        if (gCurrentObject->oInteractStatus & INT_STATUS_INTERACTED) {
-            gCurrentObject->oInteractStatus = 0;
-            gCurrentObject->oToadMessageState = TOAD_MESSAGE_TALKING;
-            play_toads_jingle();
+    } else {
+        if (gCurrentObject->oToadMessageRecentlyTalked == 0) {
+            gCurrentObject->oInteractionSubtype = INT_SUBTYPE_NPC;
+            if (gCurrentObject->oInteractStatus & INT_STATUS_INTERACTED) {
+                gCurrentObject->oInteractStatus = 0;
+                gCurrentObject->oToadMessageState = TOAD_MESSAGE_TALKING;
+                play_toads_jingle();
+            }
         }
     }
 }
@@ -124,7 +126,7 @@ static void toad_message_opaque(void) {
 static void toad_message_talking(void) {
     if (cur_obj_update_dialog_with_cutscene(3, 1, CUTSCENE_DIALOG, gCurrentObject->oToadMessageDialogId)
         != 0) {
-        gCurrentObject->oToadMessageRecentlyTalked = TRUE;
+        gCurrentObject->oToadMessageRecentlyTalked = 1;
         gCurrentObject->oToadMessageState = TOAD_MESSAGE_FADING;
         switch (gCurrentObject->oToadMessageDialogId) {
             case TOAD_STAR_1_DIALOG:
@@ -180,33 +182,33 @@ void bhv_toad_message_loop(void) {
 
 void bhv_toad_message_init(void) {
     s32 saveFlags = save_file_get_flags();
-    s32 starCount = save_file_get_total_star_count(gCurrSaveFileNum - 1, COURSE_MIN - 1, COURSE_MAX - 1);
+    s32 starCount = save_file_get_total_star_count(gCurrSaveFileNum - 1, 0, 24);
     s32 dialogId = (gCurrentObject->oBehParams >> 24) & 0xFF;
     s32 enoughStars = TRUE;
 
     switch (dialogId) {
         case TOAD_STAR_1_DIALOG:
             enoughStars = (starCount >= TOAD_STAR_1_REQUIREMENT);
-            if (saveFlags & SAVE_FLAG_COLLECTED_TOAD_STAR_1) {
+            if (saveFlags & (1 << 24)) {
                 dialogId = TOAD_STAR_1_DIALOG_AFTER;
             }
             break;
         case TOAD_STAR_2_DIALOG:
             enoughStars = (starCount >= TOAD_STAR_2_REQUIREMENT);
-            if (saveFlags & SAVE_FLAG_COLLECTED_TOAD_STAR_2) {
+            if (saveFlags & (1 << 25)) {
                 dialogId = TOAD_STAR_2_DIALOG_AFTER;
             }
             break;
         case TOAD_STAR_3_DIALOG:
             enoughStars = (starCount >= TOAD_STAR_3_REQUIREMENT);
-            if (saveFlags & SAVE_FLAG_COLLECTED_TOAD_STAR_3) {
+            if (saveFlags & (1 << 26)) {
                 dialogId = TOAD_STAR_3_DIALOG_AFTER;
             }
             break;
     }
     if (enoughStars) {
         gCurrentObject->oToadMessageDialogId = dialogId;
-        gCurrentObject->oToadMessageRecentlyTalked = FALSE;
+        gCurrentObject->oToadMessageRecentlyTalked = 0;
         gCurrentObject->oToadMessageState = TOAD_MESSAGE_FADED;
         gCurrentObject->oOpacity = 81;
     } else {
@@ -345,7 +347,7 @@ Gfx *geo_switch_mario_stand_run(s32 callContext, struct GraphNode *node, UNUSED
 
     if (callContext == GEO_CONTEXT_RENDER) {
         // assign result. 0 if moving, 1 if stationary.
-        switchCase->selectedCase = ((bodyState->action & ACT_FLAG_STATIONARY) == 0);
+        switchCase->selectedCase = ((bodyState->action & ACT_FLAG_STATIONARY) == FALSE);
     }
     return NULL;
 }
@@ -525,7 +527,7 @@ Gfx *geo_mario_rotate_wing_cap_wings(s32 callContext, struct GraphNode *node, UN
     if (callContext == GEO_CONTEXT_RENDER) {
         struct GraphNodeRotation *rotNode = (struct GraphNodeRotation *) node->next;
 
-        if (!gBodyStates[asGenerated->parameter >> 1].wingFlutter) {
+        if (gBodyStates[asGenerated->parameter >> 1].wingFlutter == FALSE) {
             rotX = (coss((gAreaUpdateCounter & 0xF) << 12) + 1.0f) * 4096.0f;
         } else {
             rotX = (coss((gAreaUpdateCounter & 7) << 13) + 1.0f) * 6144.0f;
@@ -586,7 +588,7 @@ Gfx *geo_switch_mario_hand_grab_pos(s32 callContext, struct GraphNode *b, Mat4 *
  */
 Gfx *geo_render_mirror_mario(s32 callContext, struct GraphNode *node, UNUSED Mat4 *c) {
     f32 mirroredX;
-    struct Object *mario = gMarioStates[0].marioObj;
+    struct Object *mario = gMarioStates->marioObj;
 
     switch (callContext) {
         case GEO_CONTEXT_CREATE:
@@ -606,15 +608,20 @@ Gfx *geo_render_mirror_mario(s32 callContext, struct GraphNode *node, UNUSED Mat
                 vec3s_copy(gMirrorMario.angle, mario->header.gfx.angle);
                 vec3f_copy(gMirrorMario.pos, mario->header.gfx.pos);
                 vec3f_copy(gMirrorMario.scale, mario->header.gfx.scale);
-
+                // FIXME: why does this set unk38, an inline struct, to a ptr to another one? wrong
+                // GraphNode types again?
                 gMirrorMario.animInfo = mario->header.gfx.animInfo;
                 mirroredX = MIRROR_X - gMirrorMario.pos[0];
                 gMirrorMario.pos[0] = mirroredX + MIRROR_X;
                 gMirrorMario.angle[1] = -gMirrorMario.angle[1];
                 gMirrorMario.scale[0] *= -1.0f;
-                ((struct GraphNode *) &gMirrorMario)->flags |= 1;
+                // FIXME: Why doesn't this match?
+                // gMirrorMario.node.flags |= 1;
+                ((s16 *) &gMirrorMario)[1] |= 1;
             } else {
-                ((struct GraphNode *) &gMirrorMario)->flags &= ~1;
+                // FIXME: Why doesn't this match?
+                // gMirrorMario.node.flags &= ~1;
+                ((s16 *) &gMirrorMario)[1] &= ~1;
             }
             break;
     }
